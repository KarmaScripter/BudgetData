<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BudgetData</name>
    </assembly>
    <members>
        <member name="T:BudgetExecution.AdapterBuilder">
            <summary>
            
            </summary>
            <seealso cref="T:System.Data.Common.DbDataAdapter" />
        </member>
        <member name="P:BudgetExecution.AdapterBuilder.Connection">
            <summary>
            The connection
            </summary>
        </member>
        <member name="P:BudgetExecution.AdapterBuilder.SqlStatement">
            <summary>
            The SQL statement
            </summary>
        </member>
        <member name="P:BudgetExecution.AdapterBuilder.ConnectionBuilder">
            <summary>
            The connection builder
            </summary>
        </member>
        <member name="P:BudgetExecution.AdapterBuilder.CommandBuilder">
            <summary>
            Gets the command builder.
            </summary>
            <value>
            The command builder.
            </value>
        </member>
        <member name="P:BudgetExecution.AdapterBuilder.CommandFactory">
            <summary>
            Gets the command factory.
            </summary>
            <value>
            The command factory.
            </value>
        </member>
        <member name="M:BudgetExecution.AdapterBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.AdapterBuilder"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.AdapterBuilder.#ctor(BudgetExecution.ICommandBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.AdapterBuilder"/> class.
            </summary>
            <param name="commandBuilder">The commandbuilder.</param>
        </member>
        <member name="M:BudgetExecution.AdapterBuilder.#ctor(BudgetExecution.IConnectionBuilder,BudgetExecution.ISqlStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.AdapterBuilder"/> class.
            </summary>
            <param name="connectionBuilder">The connectionbuilder.</param>
            <param name="sqlStatement">The sqlstatement.</param>
        </member>
        <member name="M:BudgetExecution.AdapterBuilder.Fail(System.Exception)">
            <summary>
            Fails the specified ex.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:BudgetExecution.AdapterFactory">
            <summary>
            
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:BudgetExecution.AdapterFactory.Connection">
            <summary>
            Gets or sets the connection.
            </summary>
            <value>
            The connection.
            </value>
        </member>
        <member name="P:BudgetExecution.AdapterFactory.SqlStatement">
            <summary>
            Gets or sets the SQL statement.
            </summary>
            <value>
            The SQL statement.
            </value>
        </member>
        <member name="P:BudgetExecution.AdapterFactory.CommandBuilder">
            <summary>
            Gets or sets the command builder.
            </summary>
            <value>
            The command builder.
            </value>
        </member>
        <member name="P:BudgetExecution.AdapterFactory.ConnectionBuilder">
            <summary>
            Gets or sets the connection builder.
            </summary>
            <value>
            The connection builder.
            </value>
        </member>
        <member name="P:BudgetExecution.AdapterFactory.AdapterBuilder">
            <summary>
            Gets or sets the adapter builder.
            </summary>
            <value>
            The adapter builder.
            </value>
        </member>
        <member name="M:BudgetExecution.AdapterFactory.#ctor(BudgetExecution.AdapterBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.AdapterFactory"/> class.
            </summary>
            <param name="adapterBuilder">The adapter builder.</param>
        </member>
        <member name="M:BudgetExecution.AdapterFactory.#ctor(BudgetExecution.IConnectionBuilder,BudgetExecution.ISqlStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.AdapterFactory"/> class.
            </summary>
            <param name="connectionBuilder">The connection builder.</param>
            <param name="sqlStatement">The SQL statement.</param>
        </member>
        <member name="M:BudgetExecution.AdapterFactory.#ctor(BudgetExecution.IConnectionBuilder,BudgetExecution.ICommandBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.AdapterFactory"/> class.
            </summary>
            <param name="connectionBuilder">The connection builder.</param>
            <param name="commandBuilder">The command builder.</param>
        </member>
        <member name="M:BudgetExecution.AdapterFactory.GetAdapter">
            <summary>
            Gets the adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.AdapterFactory.GetOleDbDataAdapter">
            <summary>
            Gets the OLE database data adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.AdapterFactory.GetSqlAdapter">
            <summary>
            Gets the SQL adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.AdapterFactory.GetSqlCeAdapter">
            <summary>
            Gets the SQL ce adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.AdapterFactory.GetSQLiteAdapter">
            <summary>
            Gets the sq lite adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.AdapterFactory.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:BudgetExecution.AdapterFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:BudgetExecution.AdapterFactory.Fail(System.Exception)">
            <summary>
            Fails the specified ex.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:BudgetExecution.IAdapter.GetConnection">
            <summary> Gets the connection. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IAdapter.GetSelectCommand">
            <summary> Gets the select command. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IAdapter.GetInsertCommand">
            <summary> Gets the insert command. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IAdapter.GetUpdateCommand">
            <summary> Gets the update command. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IAdapter.GetDeleteCommand">
            <summary> Gets the delete command. </summary>
            <returns> </returns>
        </member>
        <member name="T:BudgetExecution.CommandBuilder">
            <summary>
            
            </summary>
            <seealso cref="T:BudgetExecution.ICommandBuilder" />
        </member>
        <member name="P:BudgetExecution.CommandBuilder.Command">
            <summary>
            The command
            </summary>
        </member>
        <member name="P:BudgetExecution.CommandBuilder.ConnectionBuilder">
            <summary>
            The connection builder
            </summary>
        </member>
        <member name="P:BudgetExecution.CommandBuilder.Provider">
            <summary>
            The provider
            </summary>
        </member>
        <member name="P:BudgetExecution.CommandBuilder.Source">
            <summary>
            The source
            </summary>
        </member>
        <member name="P:BudgetExecution.CommandBuilder.SqlStatement">
            <summary>
            The SQL statement
            </summary>
        </member>
        <member name="M:BudgetExecution.CommandBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.CommandBuilder"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.CommandBuilder.#ctor(BudgetExecution.Source,BudgetExecution.Provider,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.CommandBuilder"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="provider">The provider.</param>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:BudgetExecution.CommandBuilder.#ctor(BudgetExecution.ISqlStatement)">
            <summary>
            Initializes a new instance of the
            <see cref="T:BudgetExecution.CommandBuilder"/> class.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
        </member>
        <member name="M:BudgetExecution.CommandBuilder.#ctor(BudgetExecution.IConnectionBuilder,BudgetExecution.ISqlStatement)">
            <summary>
            Initializes a new instance of the
            <see cref="T:BudgetExecution.CommandBuilder"/> class.
            </summary>
            <param name="connectionBuilder">The connection builder.</param>
            <param name="sqlStatement">The SQL statement.</param>
        </member>
        <member name="M:BudgetExecution.CommandBuilder.GetCommand(BudgetExecution.ISqlStatement)">
            <summary>
            Sets the command.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.CommandBuilder.GetSQLiteCommand(BudgetExecution.ISqlStatement)">
            <summary>
            Gets the sq lite command.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.CommandBuilder.GetSqlCeCommand(BudgetExecution.ISqlStatement)">
            <summary>
            Gets the SQL ce command.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.CommandBuilder.GetSqlCommand(BudgetExecution.ISqlStatement)">
            <summary>
            Gets the SQL command.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.CommandBuilder.GetOleDbCommand(BudgetExecution.ISqlStatement)">
            <summary>
            Gets the OLE database command.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.CommandBuilder.Fail(System.Exception)">
            <summary>
            Fails the specified ex.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:BudgetExecution.CommandFactory">
            <summary>
            
            </summary>
            <seealso cref="T:BudgetExecution.ICommandFactory" />
        </member>
        <member name="P:BudgetExecution.CommandFactory.CommandBuilder">
            <summary>
            The command builder
            </summary>
        </member>
        <member name="P:BudgetExecution.CommandFactory.ConnectionBuilder">
            <summary>
            Gets the connection builder.
            </summary>
            <value>
            The connection builder.
            </value>
        </member>
        <member name="P:BudgetExecution.CommandFactory.SqlStatement">
            <summary>
            Gets the SQL statement.
            </summary>
            <value>
            The SQL statement.
            </value>
        </member>
        <member name="P:BudgetExecution.CommandFactory.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:BudgetExecution.CommandFactory.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>
            The provider.
            </value>
        </member>
        <member name="M:BudgetExecution.CommandFactory.#ctor(BudgetExecution.Source,BudgetExecution.Provider,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.CommandFactory"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="provider">The provider.</param>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:BudgetExecution.CommandFactory.#ctor(BudgetExecution.ICommandBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.CommandFactory"/> class.
            </summary>
            <param name="commandBuilder">The command builder.</param>
        </member>
        <member name="M:BudgetExecution.CommandFactory.GetCreateTableCommand(System.String,System.Collections.Generic.IEnumerable{System.Data.DataColumn})">
            <summary>
            Gets the create table command.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="dataColumns">The Data columns.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.CommandFactory.GetCreateViewCommand(System.String,System.Collections.Generic.IEnumerable{System.Data.DataColumn})">
            <summary>
            Gets the create view command.
            </summary>
            <param name="viewName">Name of the view.</param>
            <param name="dataColumns">The Data columns.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.CommandFactory.GetDropTableCommand(System.Data.DataTable)">
            <summary>
            Gets the drop table command.
            </summary>
            <param name="dataTable">The Data table.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.CommandFactory.GetAlterCommand(System.Data.DataTable,System.Data.DataColumn)">
            <summary>
            Gets the alter command.
            </summary>
            <param name="dataTable">The Data table.</param>
            <param name="dataColumn">The Data column.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.CommandFactory.GetAlterCommand(System.Data.DataTable,System.String)">
            <summary>
            Gets the alter command.
            </summary>
            <param name="dataTable">The Data table.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.CommandFactory.GetSelectCommand">
            <summary>
            Gets the select command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.CommandFactory.GetInsertCommand">
            <summary>
            Gets the insert command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.CommandFactory.GetUpdateCommand">
            <summary>
            Gets the update commande.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.CommandFactory.GetDeleteCommand">
            <summary>
            Gets the delete command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.CommandFactory.Fail(System.Exception)">
            <summary>
            Fails the specified ex.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:BudgetExecution.ICommandBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="P:BudgetExecution.ICommandBuilder.Command">
            <summary>
            The command
            </summary>
        </member>
        <member name="P:BudgetExecution.ICommandBuilder.ConnectionBuilder">
            <summary>
            The connection builder
            </summary>
        </member>
        <member name="P:BudgetExecution.ICommandBuilder.Provider">
            <summary>
            The provider
            </summary>
        </member>
        <member name="P:BudgetExecution.ICommandBuilder.Source">
            <summary>
            The source
            </summary>
        </member>
        <member name="P:BudgetExecution.ICommandBuilder.SqlStatement">
            <summary>
            The SQL statement
            </summary>
        </member>
        <member name="M:BudgetExecution.ICommandBuilder.GetCommand(BudgetExecution.ISqlStatement)">
            <summary>
            Sets the command.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ICommandBuilder.GetSQLiteCommand(BudgetExecution.ISqlStatement)">
            <summary>
            Gets the sq lite command.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ICommandBuilder.GetSqlCeCommand(BudgetExecution.ISqlStatement)">
            <summary>
            Gets the SQL ce command.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ICommandBuilder.GetSqlCommand(BudgetExecution.ISqlStatement)">
            <summary>
            Gets the SQL command.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ICommandBuilder.GetOleDbCommand(BudgetExecution.ISqlStatement)">
            <summary>
            Gets the OLE database command.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <returns></returns>
        </member>
        <member name="T:BudgetExecution.ICommandFactory">
            <summary>
            
            </summary>
        </member>
        <member name="P:BudgetExecution.ICommandFactory.CommandBuilder">
            <summary>
            The command builder
            </summary>
        </member>
        <member name="P:BudgetExecution.ICommandFactory.ConnectionBuilder">
            <summary>
            Gets the connection builder.
            </summary>
            <value>
            The connection builder.
            </value>
        </member>
        <member name="P:BudgetExecution.ICommandFactory.SqlStatement">
            <summary>
            Gets the SQL statement.
            </summary>
            <value>
            The SQL statement.
            </value>
        </member>
        <member name="P:BudgetExecution.ICommandFactory.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:BudgetExecution.ICommandFactory.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>
            The provider.
            </value>
        </member>
        <member name="M:BudgetExecution.ICommandFactory.GetCreateTableCommand(System.String,System.Collections.Generic.IEnumerable{System.Data.DataColumn})">
            <summary>
            Gets the create table command.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="dataColumns">The Data columns.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ICommandFactory.GetCreateViewCommand(System.String,System.Collections.Generic.IEnumerable{System.Data.DataColumn})">
            <summary>
            Gets the create view command.
            </summary>
            <param name="viewName">Name of the view.</param>
            <param name="dataColumns">The Data columns.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ICommandFactory.GetDropTableCommand(System.Data.DataTable)">
            <summary>
            Gets the drop table command.
            </summary>
            <param name="dataTable">The Data table.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ICommandFactory.GetAlterCommand(System.Data.DataTable,System.Data.DataColumn)">
            <summary>
            Gets the alter command.
            </summary>
            <param name="dataTable">The Data table.</param>
            <param name="dataColumn">The Data column.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ICommandFactory.GetAlterCommand(System.Data.DataTable,System.String)">
            <summary>
            Gets the alter command.
            </summary>
            <param name="dataTable">The Data table.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ICommandFactory.GetSelectCommand">
            <summary>
            Gets the select command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ICommandFactory.GetInsertCommand">
            <summary>
            Gets the insert command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ICommandFactory.GetUpdateCommand">
            <summary>
            Gets the update command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ICommandFactory.GetDeleteCommand">
            <summary>
            Gets the delete command.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BudgetExecution.ConnectionBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:BudgetExecution.ConnectionBase.Connectors">
            <summary>
            The connector
            </summary>
        </member>
        <member name="P:BudgetExecution.ConnectionBase.AppSettings">
            <summary>
            The provider path
            </summary>
        </member>
        <member name="P:BudgetExecution.ConnectionBase.Source">
            <summary>
            The source
            </summary>
        </member>
        <member name="P:BudgetExecution.ConnectionBase.Provider">
            <summary>
            The provider
            </summary>
        </member>
        <member name="P:BudgetExecution.ConnectionBase.FileExtension">
            <summary>
            The file extension
            </summary>
        </member>
        <member name="P:BudgetExecution.ConnectionBase.FilePath">
            <summary>
            The file path
            </summary>
        </member>
        <member name="P:BudgetExecution.ConnectionBase.FileName">
            <summary>
            The file name
            </summary>
        </member>
        <member name="P:BudgetExecution.ConnectionBase.TableName">
            <summary>
            The table name
            </summary>
        </member>
        <member name="P:BudgetExecution.ConnectionBase.ConnectionString">
            <summary>
            The connection string
            </summary>
        </member>
        <member name="M:BudgetExecution.ConnectionBase.GetFilePath(BudgetExecution.Provider)">
            <summary>
            Sets the file path.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:BudgetExecution.ConnectionBase.GetFilePath(System.String)">
            <summary>
            Sets the file path.
            </summary>
            <param name="filePath">The filePath.</param>
        </member>
        <member name="M:BudgetExecution.ConnectionBase.GetProviderPath(System.String)">
            <summary>
            Sets the provider path.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:BudgetExecution.ConnectionBase.GetConnectionString(BudgetExecution.Provider)">
            <summary>
            Sets the connection string.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:BudgetExecution.ConnectionBase.Fail(System.Exception)">
            <summary>
            Fails the specified ex.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:BudgetExecution.ConnectionBuilder">
            <summary>
            
            </summary>
            <seealso cref="T:BudgetExecution.ConnectionBase" />
            <seealso cref="T:BudgetExecution.ISource" />
            <seealso cref="T:BudgetExecution.IProvider" />
            <seealso cref="T:BudgetExecution.IConnectionBuilder" />
        </member>
        <member name="P:BudgetExecution.ConnectionBuilder.ProviderPath">
            <summary>
            The provider path
            </summary>
        </member>
        <member name="M:BudgetExecution.ConnectionBuilder.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:BudgetExecution.ConnectionBuilder" />
            class.
            </summary>
        </member>
        <member name="M:BudgetExecution.ConnectionBuilder.#ctor(BudgetExecution.Source,BudgetExecution.Provider)">
            <summary>
            Initializes a new instance of the
            <see cref="T:BudgetExecution.ConnectionBuilder" />
            class.
            </summary>
            <param name="source">The source.</param>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:BudgetExecution.ConnectionBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:BudgetExecution.ConnectionBuilder" />
            class.
            </summary>
            <param name="fullPath">The fullPath.</param>
        </member>
        <member name="M:BudgetExecution.ConnectionBuilder.#ctor(System.String,BudgetExecution.Provider)">
            <summary>
            Initializes a new instance of the
            <see cref="T:BudgetExecution.ConnectionBuilder" />
            class.
            </summary>
            <param name="fullPath">The fullPath.</param>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:BudgetExecution.ConnectionBuilder.GetProvider">
            <summary>
            Gets the provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ConnectionBuilder.GetSource">
            <summary>
            Gets the source.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BudgetExecution.ConnectionFactory">
            <inheritdoc/>
            <summary>
            </summary>
            <seealso cref = "T:BudgetExecution.ISource"/>
            <seealso cref = "T:BudgetExecution.IProvider"/>
            <seealso/>
        </member>
        <member name="P:BudgetExecution.ConnectionFactory.ConnectionBuilder">
            <summary>
            Gets or sets the connection builder.
            </summary>
            <value>
            The connection builder.
            </value>
        </member>
        <member name="P:BudgetExecution.ConnectionFactory.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>
            The connection.
            </value>
        </member>
        <member name="M:BudgetExecution.ConnectionFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.ConnectionFactory"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.ConnectionFactory.#ctor(BudgetExecution.IConnectionBuilder)">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.ConnectionFactory"/> class.
            </summary>
            <param name = "builder" >
            The manager.
            </param>
        </member>
        <member name="M:BudgetExecution.ConnectionFactory.#ctor(BudgetExecution.IConnectionBuilder,BudgetExecution.ISqlStatement)">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.ConnectionFactory"/> class.
            </summary>
            <param name = "builder" >
            The connectionBuilder.
            </param>
            <param name = "sqlStatement" >
            The sqlStatement.
            </param>
        </member>
        <member name="M:BudgetExecution.ConnectionFactory.GetConnectionBuilder(BudgetExecution.IConnectionBuilder)">
            <summary>
            Sets the connection manager.
            </summary>
            <param name = "builder" >
            The manager.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.ConnectionFactory.GetConnectionBuilder">
            <inheritdoc/>
            <summary>
            Gets the connection manager.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.ConnectionFactory.SetConnection(BudgetExecution.IConnectionBuilder)">
            <summary>
            Gets the connection.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.ConnectionFactory.GetConnection">
            <inheritdoc/>
            <summary>
            Gets the connection.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.ConnectionFactory.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref = "T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:BudgetExecution.ConnectionFactory.GetProvider">
            <summary>
            Gets the provider.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.ConnectionFactory.GetSource">
            <summary>
            Gets the source.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.ConnectionFactory.Fail(System.Exception)">
            <summary>
            Get Error Dialog.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:BudgetExecution.IConnectionBuilder">
            <summary>
            </summary>
        </member>
        <member name="P:BudgetExecution.IConnectionBuilder.Source">
            <summary>
            Gets the source.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:BudgetExecution.IConnectionBuilder.Provider">
            <summary>
            Gets the provider.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:BudgetExecution.IConnectionBuilder.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:BudgetExecution.IConnectionBuilder.ProviderPath">
            <summary>
            Gets the provider path.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:BudgetExecution.IConnectionBuilder.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:BudgetExecution.IConnectionBuilder.TableName">
            <summary>
            Gets the name of the table.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:BudgetExecution.IConnectionFactory">
            <summary>
            </summary>
        </member>
        <member name="M:BudgetExecution.IConnectionFactory.GetConnection">
            <summary>
            Gets the connection.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.IConnectionFactory.GetConnectionBuilder">
            <summary>
            Gets the connection manager.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:BudgetExecution.IProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:BudgetExecution.IProvider.GetProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:BudgetExecution.ISource">
            <summary>
            
            </summary>
        </member>
        <member name="M:BudgetExecution.ISource.GetSource">
            <summary>
            Gets the source.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:BudgetExecution.AccessConnect">
            <summary>
            
            </summary>
        </member>
        <member name="F:BudgetExecution.AccessConnect._connection">
            <summary>
            The connection
            </summary>
        </member>
        <member name="M:BudgetExecution.AccessConnect.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.AccessConnect"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:BudgetExecution.AccessConnect.GetTableNames">
            <summary>
            Gets the table names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.AccessConnect.GetTable(System.String)">
            <summary>
            Gets the table.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.AccessConnect.GetColumnNames(System.String)">
            <summary>
            Gets the column names.
            </summary>
            <param name="tableName">The tableName.</param>
            <returns></returns>
        </member>
        <member name="T:BudgetExecution.AccessConversion">
            <summary>
            
            </summary>
        </member>
        <member name="F:BudgetExecution.AccessConversion._connection">
            <summary>
            The connection
            </summary>
        </member>
        <member name="M:BudgetExecution.AccessConversion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.AccessConversion"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.AccessConversion.CreateTable(System.String)">
            <summary>
            Creates the table.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.AccessConversion.InsertRow(System.String,System.String,System.String)">
            <summary>
            Inserts the row.
            </summary>
            <param name="word">The word.</param>
            <param name="image">The image.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="T:BudgetExecution.ConversionForm">
            <summary>
            
            </summary>
            <seealso cref="T:System.Windows.Forms.Form" />
        </member>
        <member name="F:BudgetExecution.ConversionForm.AccessConnect">
            <summary>
            The access connect
            </summary>
        </member>
        <member name="F:BudgetExecution.ConversionForm.Count">
            <summary>
            The count
            </summary>
        </member>
        <member name="F:BudgetExecution.ConversionForm.Selected">
            <summary>
            The selected
            </summary>
        </member>
        <member name="T:BudgetExecution.ConversionForm.UpdateStatusDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="F:BudgetExecution.ConversionForm.Updater">
            <summary>
            The updater
            </summary>
        </member>
        <member name="F:BudgetExecution.ConversionForm.Worker">
            <summary>
            The worker
            </summary>
        </member>
        <member name="M:BudgetExecution.ConversionForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.ConversionForm"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.ConversionForm.GetTables">
            <summary>
            Gets the tables.
            </summary>
        </member>
        <member name="M:BudgetExecution.ConversionForm.GetSelectedTables">
            <summary>
            Gets the selected tables.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ConversionForm.UpdateStatus">
            <summary>
            Updates the status.
            </summary>
        </member>
        <member name="M:BudgetExecution.ConversionForm.Convert">
            <summary>
            Converts this instance.
            </summary>
        </member>
        <member name="M:BudgetExecution.ConversionForm.ConvertButtonOnClick(System.Object,System.EventArgs)">
            <summary>
            Converts the button on click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BudgetExecution.ConversionForm.TableNamesOnItemCheck(System.Object,System.Windows.Forms.ItemCheckEventArgs)">
            <summary>
            Handles the ItemCheck event of the checkTableNames control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.ItemCheckEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BudgetExecution.ConversionForm.CheckAllOnClick(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the btnCheckAll control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BudgetExecution.ConversionForm.ButtoOnClick(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the button1 control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BudgetExecution.ConversionForm.SelectButtonOnClick(System.Object,System.EventArgs)">
            <summary>
            Selects the button on click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:BudgetExecution.ConversionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BudgetExecution.ConversionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BudgetExecution.ConversionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BudgetExecution.ColumnSchema">
            <summary>
            Contains the schema of a single DB column.
            </summary>
        </member>
        <member name="T:BudgetExecution.DatabaseSchema">
            <summary>
            Contains the entire database schema
            </summary>
        </member>
        <member name="T:BudgetExecution.SqlServerConverter">
            <summary>
            This class is responsible to take a single SQL Server database and convert it to
            an SQLite database file.
            </summary>
            <remarks>
            The class knows how to convert table and index structures only.
            </remarks>
        </member>
        <member name="F:BudgetExecution.SqlServerConverter._cancelled">
            <summary>
            The cancelled
            </summary>
        </member>
        <member name="F:BudgetExecution.SqlServerConverter._keyrx">
            <summary>
            The keyrx
            </summary>
        </member>
        <member name="F:BudgetExecution.SqlServerConverter._defaultvaluerx">
            <summary>
            The defaultvaluerx
            </summary>
        </member>
        <member name="F:BudgetExecution.SqlServerConverter._log">
            <summary>
            The log
            </summary>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:BudgetExecution.SqlServerConverter" />
            class.
            </summary>
        </member>
        <member name="P:BudgetExecution.SqlServerConverter.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value>
            <c> true </c>
            if this instance is active; otherwise,
            <c> false </c>
            .
            </value>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.WriteTriggerSchema(BudgetExecution.TriggerSchema)">
            <summary>
            Writes the trigger schema.
            </summary>
            <param name="ts">The ts.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.CancelConversion">
            <summary>
            Cancels the conversion.
            </summary>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.ConvertSqlServerToSQLiteDatabase(System.String,System.String,System.String,BudgetExecution.SqlConversionHandler,BudgetExecution.SqlTableSelectionHandler,BudgetExecution.FailedViewDefinitionHandler,System.Boolean,System.Boolean)">
            <summary>
            Converts the SQL server to sq lite database.
            </summary>
            <param name="sqlserverconnstring">The sqlserverconnstring.</param>
            <param name="path">The path.</param>
            <param name="password">The password.</param>
            <param name="handler">The handler.</param>
            <param name="selectionhandler">The selectionhandler.</param>
            <param name="viewfailurehandler">The viewfailurehandler.</param>
            <param name="createtriggers">if set to
            <c> true </c>
            [createtriggers].</param>
            <param name="createviews">if set to
            <c> true </c>
            [createviews].</param>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.ConvertToSQLite(System.String,System.String,System.String,BudgetExecution.SqlConversionHandler,BudgetExecution.SqlTableSelectionHandler,BudgetExecution.FailedViewDefinitionHandler,System.Boolean,System.Boolean)">
            <summary>
            Converts to sq lite.
            </summary>
            <param name="sqlconnstring">The sqlconnstring.</param>
            <param name="path">The path.</param>
            <param name="password">The password.</param>
            <param name="handler">The handler.</param>
            <param name="selectionhandler">The selectionhandler.</param>
            <param name="viewfailurehandler">The viewfailurehandler.</param>
            <param name="createtriggers">if set to
            <c> true </c>
            [createtriggers].</param>
            <param name="createviews">if set to
            <c> true </c>
            [createviews].</param>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.CopyDataRows(System.String,System.String,System.Collections.Generic.IReadOnlyList{BudgetExecution.TableSchema},System.String,BudgetExecution.SqlConversionHandler)">
            <summary>
            Copies the Data rows.
            </summary>
            <param name="sqlconnstring">The sqlconnstring.</param>
            <param name="path">The path.</param>
            <param name="schema">The schema.</param>
            <param name="password">The password.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.CastValueForColumn(System.Object,BudgetExecution.ColumnSchema)">
            <summary>
            Casts the value for column.
            </summary>
            <param name="val">The value.</param>
            <param name="columnschema">The columnschema.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Illegal database type [" +
            Enum.GetName(typeof(DbType), dt) + "]</exception>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.ParseBlobAsGuid(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Parses the BLOB as unique identifier.
            </summary>
            <param name="blob">The BLOB.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.ParseStringAsGuid(System.String)">
            <summary>
            Parses the string as unique identifier.
            </summary>
            <param name="str">The string.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.BuildSQLiteInsert(BudgetExecution.TableSchema)">
            <summary>
            Builds the sq lite insert.
            </summary>
            <param name="ts">The ts.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.GetNormalizedName(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Gets the name of the normalized.
            </summary>
            <param name="str">The string.</param>
            <param name="names">The names.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.GetDbTypeOfColumn(BudgetExecution.ColumnSchema)">
            <summary>
            Gets the database type of column.
            </summary>
            <param name="cs">The cs.</param>
            <returns></returns>
            <exception cref="T:System.ApplicationException">Illegal DB type found (" +
            cs.ColumnType + ")</exception>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.BuildSqlServerTableQuery(BudgetExecution.TableSchema)">
            <summary>
            Builds the SQL server table query.
            </summary>
            <param name="ts">The ts.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.CreateSQLiteDatabase(System.String,BudgetExecution.DatabaseSchema,System.String,BudgetExecution.SqlConversionHandler,BudgetExecution.FailedViewDefinitionHandler,System.Boolean)">
            <summary>
            Creates the sq lite database.
            </summary>
            <param name="path">The path.</param>
            <param name="schema">The schema.</param>
            <param name="password">The password.</param>
            <param name="handler">The handler.</param>
            <param name="viewfailurehandler">The viewfailurehandler.</param>
            <param name="createviews">if set to
            <c> true </c>
            [createviews].</param>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.AddSQLiteView(System.Data.SQLite.SQLiteConnection,BudgetExecution.ViewSchema,BudgetExecution.FailedViewDefinitionHandler)">
            <summary>
            Adds the sq lite view.
            </summary>
            <param name="conn">The connection.</param>
            <param name="vs">The vs.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.AddSQLiteTable(System.Data.SQLite.SQLiteConnection,BudgetExecution.TableSchema)">
            <summary>
            Adds the sq lite table.
            </summary>
            <param name="conn">The connection.</param>
            <param name="dt">The dt.</param>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.BuildCreateTableQuery(BudgetExecution.TableSchema)">
            <summary>
            Builds the create table query.
            </summary>
            <param name="schema">The ts.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.BuildCreateIndex(System.String,BudgetExecution.IndexSchema)">
            <summary>
            Builds the index of the create.
            </summary>
            <param name="tablename">The tablename.</param>
            <param name="schema">The schema.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.BuildColumnStatement(BudgetExecution.ColumnSchema,BudgetExecution.TableSchema,System.Boolean@)">
            <summary>
            Builds the column statement.
            </summary>
            <param name="col">The col.</param>
            <param name="ts">The ts.</param>
            <param name="pkey">if set to
            <c> true </c>
            [pkey].</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.DiscardNational(System.String)">
            <summary>
            Discards the national.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.IsValidDefaultValue(System.String)">
            <summary>
            Determines whether [is valid default value] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
            <c> true </c>
            if [is valid default value] [the specified value]; otherwise,
            <c> false </c>
            .
            </returns>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.IsSingleQuoted(System.String)">
            <summary>
            Determines whether [is single quoted] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
            <c> true </c>
            if [is single quoted] [the specified value]; otherwise,
            <c> false </c>
            .
            </returns>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.StripParens(System.String)">
            <summary>
            Strips the parens.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.ReadSqlServerSchema(System.String,BudgetExecution.SqlConversionHandler,BudgetExecution.SqlTableSelectionHandler)">
            <summary>
            Reads the SQL server schema.
            </summary>
            <param name="connstring">The connstring.</param>
            <param name="handler">The handler.</param>
            <param name="selectionhandler">The selectionhandler.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.CheckCancelled">
            <summary>
            Checks the cancelled.
            </summary>
            <exception cref="T:System.ApplicationException">User cancelled the conversion</exception>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.CreateTableSchema(System.Data.SqlClient.SqlConnection,System.String,System.String)">
            <summary>
            Creates the table schema.
            </summary>
            <param name="conn">The connection.</param>
            <param name="tablename">The tablename.</param>
            <param name="tschma">The tschma.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.ValidateDataType(System.String)">
            <summary>
            Validates the type of the Data.
            </summary>
            <param name="datatype">The datatype.</param>
            <exception cref="T:System.ApplicationException">Validation failed for Data type [" +
            datatype + "]</exception>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.FixDefaultValueString(System.String)">
            <summary>
            Fixes the default value string.
            </summary>
            <param name="coldefault">The coldefault.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.CreateForeignKeySchema(System.Data.SqlClient.SqlConnection,BudgetExecution.TableSchema)">
            <summary>
            Creates the foreign key schema.
            </summary>
            <param name="conn">The connection.</param>
            <param name="ts">The ts.</param>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.BuildIndexSchema(System.String,System.String,System.String)">
            <summary>
            Builds the index schema.
            </summary>
            <param name="indexname">The indexname.</param>
            <param name="desc">The desc.</param>
            <param name="keys">The keys.</param>
            <returns></returns>
            <exception cref="T:System.ApplicationException">Illegal key name [" + p + "] in
            index [" + indexname + "]</exception>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.AdjustDefaultValue(System.String)">
            <summary>
            Adjusts the default value.
            </summary>
            <param name="val">The value.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.CreateSQLiteConnectionString(System.String,System.String)">
            <summary>
            Creates the sq lite connection string.
            </summary>
            <param name="path">The path.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.AddTriggersForForeignKeys(System.String,System.Collections.Generic.IEnumerable{BudgetExecution.TableSchema},System.String)">
            <summary>
            Adds the triggers for foreign keys.
            </summary>
            <param name="path">The path.</param>
            <param name="schema">The schema.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:BudgetExecution.SqlServerConverter.AddTableTriggers(System.Data.SQLite.SQLiteConnection,BudgetExecution.TableSchema)">
            <summary>
            Adds the table triggers.
            </summary>
            <param name="conn">The connection.</param>
            <param name="dt">The dt.</param>
        </member>
        <member name="T:BudgetExecution.ViewSchema">
            <summary>
            Describes a single view schema
            </summary>
        </member>
        <member name="F:BudgetExecution.ViewSchema.viewName">
            <summary>
            Contains the view name
            </summary>
        </member>
        <member name="F:BudgetExecution.ViewSchema.viewSQL">
            <summary>
            Contains the view SQL statement
            </summary>
        </member>
        <member name="T:BudgetExecution.Builder">
            <summary>
            
            </summary>
            <seealso cref="T:BudgetExecution.BuilderBase" />
            <seealso cref="T:BudgetExecution.IBuilder" />
        </member>
        <member name="P:BudgetExecution.Builder.ProgramElements">
            <summary>
            The program elements
            </summary>
        </member>
        <member name="M:BudgetExecution.Builder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Builder"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.Builder.#ctor(BudgetExecution.Source,BudgetExecution.Provider)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Builder"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:BudgetExecution.Builder.#ctor(BudgetExecution.Source,BudgetExecution.Provider,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Builder"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="provider">The provider.</param>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:BudgetExecution.Builder.#ctor(BudgetExecution.Source,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Builder"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:BudgetExecution.Builder.#ctor(BudgetExecution.IQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Builder"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:BudgetExecution.Builder.GetValues(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String)">
            <summary>
            Gets the values.
            </summary>
            <param name="dataRows">The dataRows.</param>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.Builder.GetValues(System.Collections.Generic.IEnumerable{System.Data.DataRow},BudgetExecution.Field,System.String)">
            <summary>
            Gets the values.
            </summary>
            <param name="dataRows">The dataRows.</param>
            <param name="field">The field.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.Builder.GetSchemaTable(System.Data.DataTable)">
            <summary>
            Gets the schema table.
            </summary>
            <param name="dataTable">The dataRows table.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.Builder.CreateTableFromExcel(System.String)">
            <summary>
            Creates the table from excel.
            </summary>
            <param name="filePath">The file path.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.Builder.CreateTableFromExcel(System.String,System.Boolean)">
            <summary>
            Creates the table from excel.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="header">if set to <c>true</c> [header].</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.Builder.GetSeries(System.Collections.Generic.IEnumerable{System.Data.DataRow},BudgetExecution.Field,System.String)">
            <summary>
            Gets the series.
            </summary>
            <param name="dataRows">The dataRows.</param>
            <param name="field">The field.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.Builder.GetBuilder">
            <summary>
            Gets the builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.Builder.FilterData(System.Collections.Generic.IEnumerable{System.Data.DataRow},BudgetExecution.Field,System.String)">
            <summary>
            Filters the dataRows.
            </summary>
            <param name="dataRows">The dataRows.</param>
            <param name="field">The field.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.Builder.GetSeries(System.Data.DataTable)">
            <summary>
            Gets the series.
            </summary>
            <param name="dataTable">The dataRows.</param>
            <returns></returns>
        </member>
        <member name="T:BudgetExecution.BuilderBase">
            <summary>
            
            </summary>
            <seealso cref="T:BudgetExecution.DataAccess" />
        </member>
        <member name="M:BudgetExecution.BuilderBase.GetColumnOrdinals">
            <summary>
            Gets the column ordinals.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.BuilderBase.GetFields">
            <summary>
            Gets the fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.BuilderBase.GetElements">
            <summary>
            Gets the elements.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BudgetExecution.DataAccess">
            <summary>
            
            </summary>
            <seealso cref="T:BudgetExecution.DataConfig" />
            <seealso cref="T:BudgetExecution.ISource" />
            <seealso cref="T:BudgetExecution.IProvider" />
        </member>
        <member name="M:BudgetExecution.DataAccess.GetQuery">
            <summary>
            Gets the query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.DataAccess.GetData">
            <summary>
            Gets the Data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.DataAccess.GetDataTable">
            <summary>
            Gets the Data table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.DataAccess.GetDataSet">
            <summary>
            Gets the Data set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.DataAccess.GetSource">
            <summary>
            Gets the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.DataAccess.GetProvider">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.DataAccess.GetRecord">
            <summary>
            Gets the record.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.DataAccess.SetColumnCaptions(System.Data.DataTable)">
            <summary>
            Sets the column captions.
            </summary>
            <param name="dataTable">The Data table.</param>
        </member>
        <member name="M:BudgetExecution.DataAccess.GetColumnSchema">
            <summary>
            Gets the column schema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.DataAccess.GetPrimaryIndexes(System.Collections.Generic.IEnumerable{System.Data.DataRow})">
            <summary>
            Gets the primary indexes.
            </summary>
            <param name="dataRows">The Data rows.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.DataAccess.GetColumnOrdinals(System.Collections.Generic.IEnumerable{System.Data.DataColumn})">
            <summary>
            Gets the column ordinals.
            </summary>
            <param name="dataColumns">The Data columns.</param>
            <returns></returns>
        </member>
        <member name="T:BudgetExecution.DataBuilder">
            <summary> </summary>
            <seealso cref = "T:BudgetExecution.Builder" />
        </member>
        <member name="M:BudgetExecution.DataBuilder.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref = "T:BudgetExecution.DataBuilder" />
            class.
            </summary>
        </member>
        <member name="M:BudgetExecution.DataBuilder.#ctor(BudgetExecution.Source,BudgetExecution.Provider)">
            <summary>
            Initializes a new instance of the
            <see cref = "T:BudgetExecution.DataBuilder" />
            class.
            </summary>
            <param name = "source" > The source. </param>
            <param name = "provider" > The provider. </param>
        </member>
        <member name="M:BudgetExecution.DataBuilder.#ctor(BudgetExecution.Source,BudgetExecution.Provider,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the
            <see cref = "T:BudgetExecution.DataBuilder" />
            class.
            </summary>
            <param name = "source" > The source. </param>
            <param name = "provider" > The provider. </param>
            <param name = "args" > The arguments. </param>
        </member>
        <member name="M:BudgetExecution.DataBuilder.#ctor(BudgetExecution.Source,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the
            <see cref = "T:BudgetExecution.DataBuilder" />
            class.
            </summary>
            <param name = "source" > The source. </param>
            <param name = "dict" > The dictionary. </param>
        </member>
        <member name="M:BudgetExecution.DataBuilder.#ctor(BudgetExecution.IQuery)">
            <summary>
            Initializes a new instance of the
            <see cref = "T:BudgetExecution.DataBuilder" />
            class.
            </summary>
            <param name = "query" > The query. </param>
        </member>
        <member name="M:BudgetExecution.DataBuilder.#ctor(System.Data.DataRow)">
            <summary>
            Initializes a new instance of the
            <see cref = "T:BudgetExecution.DataBuilder" />
            class.
            </summary>
            <param name = "row" > The row. </param>
        </member>
        <member name="M:BudgetExecution.DataBuilder.GetDate(BudgetExecution.Field)">
            <summary> Gets the date. </summary>
            <param name = "field" > The field. </param>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.DataBuilder.FilterData(BudgetExecution.Field,System.String)">
            <summary> Filters the Data. </summary>
            <param name = "field" > The field. </param>
            <param name = "filter" > The filter. </param>
            <returns> </returns>
        </member>
        <member name="T:BudgetExecution.DataConfig">
            <summary>
            
            </summary>
        </member>
        <member name="P:BudgetExecution.DataConfig.Source">
            <summary>
            The source
            </summary>
        </member>
        <member name="P:BudgetExecution.DataConfig.Provider">
            <summary>
            The provider
            </summary>
        </member>
        <member name="P:BudgetExecution.DataConfig.ConnectionBuilder">
            <summary>
            The connection builder
            </summary>
        </member>
        <member name="P:BudgetExecution.DataConfig.Args">
            <summary>
            The arguments
            </summary>
        </member>
        <member name="P:BudgetExecution.DataConfig.SqlStatement">
            <summary>
            The SQL statement
            </summary>
        </member>
        <member name="P:BudgetExecution.DataConfig.Query">
            <summary>
            The query
            </summary>
        </member>
        <member name="P:BudgetExecution.DataConfig.Record">
            <summary>
            The record
            </summary>
        </member>
        <member name="P:BudgetExecution.DataConfig.Table">
            <summary>
            The Data table
            </summary>
        </member>
        <member name="P:BudgetExecution.DataConfig.DataSet">
            <summary>
            Gets or sets the Data set.
            </summary>
            <value>
            The Data set.
            </value>
        </member>
        <member name="M:BudgetExecution.DataConfig.Fail(System.Exception)">
            <summary>
            Fails the specified ex.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:BudgetExecution.IBuilder">
            <summary>
            
            </summary>
            <seealso cref="T:BudgetExecution.ISource" />
        </member>
        <member name="M:BudgetExecution.IBuilder.GetRecord">
            <summary>
            Gets the record.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.IBuilder.GetColumnOrdinals">
            <summary>
            Gets the column ordinals.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.IBuilder.GetFields">
            <summary>
            Gets the fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.IBuilder.GetElements">
            <summary>
            Gets the elements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.IBuilder.GetProvider">
            <summary>
            Gets the provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.IBuilder.GetQuery">
            <summary>
            Gets the query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.IBuilder.GetData">
            <summary>
            Gets the Data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.IBuilder.GetDataTable">
            <summary>
            Gets the Data table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.IBuilder.GetDataSet">
            <summary>
            Gets the Data set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.IBuilder.GetColumnSchema">
            <summary>
            Gets the column schema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.IBuilder.GetPrimaryIndexes(System.Collections.Generic.IEnumerable{System.Data.DataRow})">
            <summary>
            Gets the primary indexes.
            </summary>
            <param name="data">The Data.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.IBuilder.GetColumnOrdinals(System.Collections.Generic.IEnumerable{System.Data.DataColumn})">
            <summary>
            Gets the column ordinals.
            </summary>
            <param name="data">The Data.</param>
            <returns></returns>
        </member>
        <member name="T:BudgetExecution.IDataAccess">
            <summary> </summary>
        </member>
        <member name="M:BudgetExecution.IDataAccess.GetQuery">
            <summary> Gets the query. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataAccess.GetQuery(BudgetExecution.IConnectionBuilder,BudgetExecution.ISqlStatement)">
            <summary> Gets the query. </summary>
            <param name = "connectionBuilder" > The connectionBuilder. </param>
            <param name = "sqlStatement" > The sqlStatement. </param>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataAccess.GetRecord">
            <summary> Gets the record. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataAccess.GetData">
            <summary> Gets the Data. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataAccess.GetDataTable">
            <summary> Gets the Data table. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataAccess.SetColumnCaptions(System.Data.DataTable)">
            <summary> Sets the column captions. </summary>
            <param name = "dataTable" > The dataTable. </param>
        </member>
        <member name="M:BudgetExecution.IDataAccess.GetColumnSchema">
            <summary> Gets the column schema. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataAccess.GetSchemaTable(System.Data.DataTable)">
            <summary> Gets the schema table. </summary>
            <param name = "dataTable" > The dataTable. </param>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataAccess.GetPrimaryIndexes(System.Collections.Generic.IEnumerable{System.Data.DataRow})">
            <summary> Gets the primary indexes. </summary>
            <param name = "data" > The Data. </param>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataAccess.GetColumnOrdinals(System.Collections.Generic.IEnumerable{System.Data.DataColumn})">
            <summary> Gets the column ordinals. </summary>
            <param name = "data" > The Data. </param>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataAccess.GetDataSet">
            <summary> Gets the Data set. </summary>
            <returns> </returns>
        </member>
        <member name="T:BudgetExecution.IDataBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:BudgetExecution.IDataBuilder.GetBuilder">
            <summary>
            Gets the builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.IDataSchema.GetColumnNames">
            <summary> Sets the column names. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataSchema.GetColumnCaptions">
            <summary> Gets the column captions. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataSchema.GetColumnOrdinals">
            <summary> Gets the column ordinals. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataSchema.GetColumnTypes">
            <summary> Sets the column types. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataSchema.GetIndexes">
            <summary> Sets the primary keys. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataSchema.GetPrimaryKeyColumn">
            <summary> Gets the primary key columns. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataSchema.GetColumnSchema">
            <summary> Gets the column schema. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataSchema.GetSchemaTable">
            <summary> Gets the schema table. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataSchema.GetDataTable">
            <summary> Gets the Data Table. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataSchema.GetTableName">
            <summary> Gets the name of the Table. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.IDataSchema.GetData">
            <summary> Gets the Data. </summary>
            <returns> </returns>
        </member>
        <member name="T:BudgetExecution.Error">
            <summary>
            
            </summary>
        </member>
        <member name="P:BudgetExecution.Error.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="P:BudgetExecution.Error.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
        </member>
        <member name="M:BudgetExecution.Error.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Error"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.Error.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Error"/> class.
            </summary>
            <param name="ext">The ext.</param>
        </member>
        <member name="M:BudgetExecution.Error.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Error"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BudgetExecution.Error.SetText(System.String)">
            <summary>
            Sets the text.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="F:BudgetExecution.Error.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BudgetExecution.Error.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BudgetExecution.Error.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BudgetExecution.Amount">
            <summary>
            
            </summary>
            <seealso cref="T:BudgetExecution.IAmount" />
        </member>
        <member name="F:BudgetExecution.Amount.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="P:BudgetExecution.Amount.Funding">
            <summary>
            The funding
            </summary>
        </member>
        <member name="P:BudgetExecution.Amount.Initial">
            <summary>
            The initial
            </summary>
        </member>
        <member name="P:BudgetExecution.Amount.Delta">
            <summary>
            The delta
            </summary>
        </member>
        <member name="P:BudgetExecution.Amount.Numeric">
            <summary>
            The numeric
            </summary>
        </member>
        <member name="M:BudgetExecution.Amount.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Amount"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.Amount.#ctor(BudgetExecution.Numeric,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Amount"/> class.
            </summary>
            <param name="numeric">The numeric.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:BudgetExecution.Amount.#ctor(System.Double,BudgetExecution.Numeric)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Amount"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="numeric">The numeric.</param>
        </member>
        <member name="M:BudgetExecution.Amount.#ctor(System.Data.DataRow,BudgetExecution.Numeric)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Amount"/> class.
            </summary>
            <param name="dataRow">The Data row.</param>
            <param name="numeric">The numeric.</param>
        </member>
        <member name="M:BudgetExecution.Amount.GetNumeric">
            <summary>
            Gets the numeric.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.Amount.GetOriginal">
            <summary>
            Gets the original.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.Amount.GetDelta">
            <summary>
            Gets the delta.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.Amount.Increase(System.Double)">
            <summary>
            Increases the specified amount.
            </summary>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:BudgetExecution.Amount.Decrease(System.Double)">
            <summary>
            Decreases the specified amount.
            </summary>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:BudgetExecution.Amount.IsEqual(BudgetExecution.IAmount)">
            <summary>
            Determines whether the specified amount is equal.
            </summary>
            <param name="amount">The amount.</param>
            <returns>
              <c>true</c> if the specified amount is equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BudgetExecution.Amount.IsEqual(BudgetExecution.IAmount,BudgetExecution.IAmount)">
            <summary>
            Determines whether the specified first is equal.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>
              <c>true</c> if the specified first is equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BudgetExecution.Amount.OnChanged(System.Object,System.EventArgs)">
            <summary>
            Called when [changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event Data.</param>
        </member>
        <member name="T:BudgetExecution.Arg">
            <summary>
            
            </summary>
        </member>
        <member name="P:BudgetExecution.Arg.Values">
            <summary>
            The values
            </summary>
        </member>
        <member name="P:BudgetExecution.Arg.Names">
            <summary>
            The names
            </summary>
        </member>
        <member name="P:BudgetExecution.Arg.Input">
            <summary>
            The input
            </summary>
        </member>
        <member name="P:BudgetExecution.Arg.Output">
            <summary>
            The output
            </summary>
        </member>
        <member name="M:BudgetExecution.Arg.SetInput(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the input.
            </summary>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:BudgetExecution.Arg.SetOutput(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the output.
            </summary>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:BudgetExecution.Arg.GetValues">
            <summary>
            Gets the values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.Arg.GetNames">
            <summary>
            Gets the names.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BudgetExecution.DataUnit">
            <summary>
            
            </summary>
            <seealso cref="T:BudgetExecution.IDataUnit" />
        </member>
        <member name="P:BudgetExecution.DataUnit.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="P:BudgetExecution.DataUnit.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:BudgetExecution.DataUnit.Field">
            <summary>
            Gets the field.
            </summary>
        </member>
        <member name="M:BudgetExecution.DataUnit.IsMatch(BudgetExecution.IDataUnit)">
            <summary>
            Determines whether the specified dataUnit is match.
            </summary>
            <param name="dataUnit">The dataUnit.</param>
            <returns>
              <c>true</c> if the specified dataUnit is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BudgetExecution.DataUnit.Fail(System.Exception)">
            <summary>
            Fails the specified ex.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:BudgetExecution.Element">
            <summary>
            
            </summary>
            <seealso cref="T:BudgetExecution.IElement" />
        </member>
        <member name="P:BudgetExecution.Element.ID">
            <summary>
            Gets the identifier.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:BudgetExecution.Element.Code">
            <summary>
            Gets the code.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:BudgetExecution.Element.Initial">
            <summary>
            The initial
            </summary>
        </member>
        <member name="F:BudgetExecution.Element.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="M:BudgetExecution.Element.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Element"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.Element.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Element"/> class.
            </summary>
            <param name="kvp">The KVP.</param>
        </member>
        <member name="M:BudgetExecution.Element.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Element"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:BudgetExecution.Element.#ctor(System.Data.DataRow,BudgetExecution.Field)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Element"/> class.
            </summary>
            <param name="dataRow">The Data row.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:BudgetExecution.Element.#ctor(BudgetExecution.Field,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Element"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:BudgetExecution.Element.#ctor(System.Data.DataRow,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Element"/> class.
            </summary>
            <param name="dataRow">The Data row.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:BudgetExecution.Element.#ctor(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Element"/> class.
            </summary>
            <param name="dataRow">The Data row.</param>
            <param name="dataColumn">The Data column.</param>
        </member>
        <member name="M:BudgetExecution.Element.IsMatch(BudgetExecution.IDataUnit)">
            <summary>
            Determines whether the specified element is match.
            </summary>
            <param name="dataUnit">The element.</param>
            <returns>
              <c>true</c> if the specified element is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BudgetExecution.Element.IsMatch(BudgetExecution.IElement,BudgetExecution.IElement)">
            <summary>
            Determines whether the specified primary is match.
            </summary>
            <param name="primary">The primary.</param>
            <param name="secondary">The secondary.</param>
            <returns>
              <c>true</c> if the specified primary is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BudgetExecution.Element.SetName(System.Data.DataRow,System.String)">
            <summary>
            Sets the columnName.
            </summary>
            <param name = "dataRow" > </param>
            <param name = "columnName" > </param>
        </member>
        <member name="M:BudgetExecution.Element.SetName(BudgetExecution.Field)">
            <summary>
            Sets the columnName.
            </summary>
            <param name = "field" > </param>
        </member>
        <member name="M:BudgetExecution.Element.SetName(System.Data.DataRow,BudgetExecution.Field)">
            <summary>
            Sets the columnName.
            </summary>
            <param name = "dataRow" > </param>
            <param name = "field" > </param>
        </member>
        <member name="M:BudgetExecution.Element.SetField(System.String)">
            <summary>
            Sets the field.
            </summary>
            <param name = "fieldName" > </param>
        </member>
        <member name="M:BudgetExecution.Element.SetField(System.Data.DataRow,System.String)">
            <summary>
            Sets the field.
            </summary>
            <param name = "dataRow" > </param>
            <param name = "fieldName" > </param>
        </member>
        <member name="M:BudgetExecution.Element.SetField(BudgetExecution.Field)">
            <summary>
            Sets the field.
            </summary>
            <param name = "field" > </param>
        </member>
        <member name="M:BudgetExecution.Element.SetField(System.Data.DataRow,BudgetExecution.Field)">
            <summary>
            Sets the field.
            </summary>
            <param name = "dataRow" > </param>
            <param name = "field" > </param>
        </member>
        <member name="M:BudgetExecution.Element.SetValue(System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name = "value" > </param>
        </member>
        <member name="M:BudgetExecution.Element.SetValue(System.Data.DataRow,System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name = "dataRow" > </param>
            <param name = "columnName" > </param>
        </member>
        <member name="M:BudgetExecution.Element.SetValue(System.Data.DataRow,BudgetExecution.Field)">
            <summary>
            Sets the value.
            </summary>
            <param name = "dataRow" > </param>
            <param name = "field" > </param>
        </member>
        <member name="T:BudgetExecution.IAmount">
            <summary>
            
            </summary>
        </member>
        <member name="P:BudgetExecution.IAmount.Funding">
            <summary>
            Gets the funding.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BudgetExecution.IAmount.Numeric">
            <summary>
            Gets the numeric.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BudgetExecution.IDataUnit.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:BudgetExecution.IDataUnit.IsMatch(BudgetExecution.IDataUnit)">
            <summary> Determines whether the specified dataUnit is equal. </summary>
            <param name = "dataUnit" > The dataUnit. </param>
            <returns>
            <c> true </c>
            if the specified dataUnit is equal; otherwise,
            <c> false </c>
            .
            </returns>
        </member>
        <member name="T:BudgetExecution.IElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:BudgetExecution.IElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:BudgetExecution.IElement.Field">
            <summary>
            Gets the field.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BudgetExecution.IKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:BudgetExecution.IKey.Index">
            <summary>
            Gets the index.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BudgetExecution.IKey.Name">
            <summary>
            Gets the name.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BudgetExecution.IMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:BudgetExecution.IMap.GetKey">
            <summary>
            Gets the key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.IMap.GetElements">
            <summary>
            Gets the elements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.IMap.GetInput">
            <summary>
            Gets the input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.IMap.GetOutput">
            <summary>
            Gets the output.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BudgetExecution.Key">
            <summary>
            
            </summary>
            <seealso cref="T:BudgetExecution.IKey" />
        </member>
        <member name="P:BudgetExecution.Key.Default">
            <summary>
            Gets the default.
            </summary>
            <value>
            The default.
            </value>
        </member>
        <member name="P:BudgetExecution.Key.PrimaryKey">
            <summary>
            Gets or sets the primary key.
            </summary>
            <value>
            The primary key.
            </value>
        </member>
        <member name="P:BudgetExecution.Key.Index">
            <summary>
            Gets the index.
            </summary>
        </member>
        <member name="P:BudgetExecution.Key.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="M:BudgetExecution.Key.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Key"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.Key.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Key"/> class.
            </summary>
            <param name="kvp">The KVP.</param>
        </member>
        <member name="M:BudgetExecution.Key.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Key"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:BudgetExecution.Key.#ctor(System.Data.DataRow,BudgetExecution.PrimaryKey)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Key"/> class.
            </summary>
            <param name="dataRow">The data row.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:BudgetExecution.Key.#ctor(BudgetExecution.PrimaryKey,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Key"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:BudgetExecution.Key.#ctor(System.Data.DataRow)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Key"/> class.
            </summary>
            <param name="dataRow">The data row.</param>
        </member>
        <member name="M:BudgetExecution.Key.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:BudgetExecution.Key.IsMatch(BudgetExecution.IKey)">
            <summary>
            Determines whether the specified key is match.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BudgetExecution.Key.IsMatch(BudgetExecution.IKey,BudgetExecution.IKey)">
            <summary>
            Determines whether the specified primary is match.
            </summary>
            <param name="primary">The primary.</param>
            <param name="secondary">The secondary.</param>
            <returns>
              <c>true</c> if the specified primary is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BudgetExecution.Key.SetPrimaryKey(System.String)">
            <summary>
            Sets the primary key.
            </summary>
            <param name="keyName">Name of the key.</param>
        </member>
        <member name="M:BudgetExecution.Key.SetPrimaryKey(System.Data.DataRow)">
            <summary>
            Sets the primary key.
            </summary>
            <param name="dataRow">The data row.</param>
        </member>
        <member name="M:BudgetExecution.Key.SetPrimaryKey(BudgetExecution.PrimaryKey)">
            <summary>
            Sets the primary key.
            </summary>
            <param name="keyName">Name of the key.</param>
        </member>
        <member name="M:BudgetExecution.Key.SetPrimaryKey(System.Data.DataRow,BudgetExecution.PrimaryKey)">
            <summary>
            Sets the primary key.
            </summary>
            <param name="dataRow">The data row.</param>
            <param name="keyName">Name of the key.</param>
        </member>
        <member name="M:BudgetExecution.Key.SetIndex(System.Int32)">
            <summary>
            Sets the index.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BudgetExecution.Key.SetIndex(System.Data.DataRow,BudgetExecution.PrimaryKey)">
            <summary>
            Sets the index.
            </summary>
            <param name="dataRow">The data row.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:BudgetExecution.Key.Fail(System.Exception)">
            <summary>
            Fails the specified ex.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:BudgetExecution.Map">
            <summary>
            
            </summary>
            <seealso cref="T:BudgetExecution.Arg" />
            <seealso cref="T:BudgetExecution.IMap" />
        </member>
        <member name="P:BudgetExecution.Map.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:BudgetExecution.Map.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Map"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.Map.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Map"/> class.
            </summary>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:BudgetExecution.Map.#ctor(System.Data.DataRow)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.Map"/> class.
            </summary>
            <param name="data">The Data.</param>
        </member>
        <member name="M:BudgetExecution.Map.GetInput">
            <summary>
            Gets the input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.Map.GetOutput">
            <summary>
            Gets the output.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.Map.HasPrimaryKey">
            <summary>
            Determines whether [has primary key].
            </summary>
            <returns>
              <c>true</c> if [has primary key]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BudgetExecution.Map.HasElements">
            <summary>
            Determines whether this instance has elements.
            </summary>
            <returns>
              <c>true</c> if this instance has elements; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BudgetExecution.Map.GetKey">
            <summary>
            Gets the key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.Map.GetElements">
            <summary>
            Gets the elements.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BudgetExecution.UnitBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:BudgetExecution.UnitBase.Data">
            <summary>
            The Data
            </summary>
        </member>
        <member name="P:BudgetExecution.UnitBase.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:BudgetExecution.UnitBase.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:BudgetExecution.UnitBase.IsMatch(BudgetExecution.IDataUnit)">
            <summary>
            Determines whether the specified unit is match.
            </summary>
            <param name="unit">The unit.</param>
            <returns>
              <c>true</c> if the specified unit is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BudgetExecution.UnitBase.Fail(System.Exception)">
            <summary>
            Fails the specified ex.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="P:BudgetExecution.Message.Stack">
            <summary>
            Gets the stack.
            </summary>
            <value>
            The stack.
            </value>
        </member>
        <member name="P:BudgetExecution.Message.Target">
            <summary>
            Gets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="M:BudgetExecution.Message.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:BudgetExecution.Message"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.Message.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.Message"/> class.
            </summary>
            <param name = "message" >
            The message.
            </param>
        </member>
        <member name="M:BudgetExecution.Message.OnOkButtonClicked(System.Object,System.EventArgs)">
            <summary>
            Called when [ok button clicked].
            </summary>
            <param name = "sender" >
            The sender.
            </param>
            <param name = "e" >
            The <see cref = "T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:BudgetExecution.Message.OnStackButtonClicked(System.Object,System.EventArgs)">
            <summary>
            Called when [stack button clicked].
            </summary>
            <param name = "sender" >
            The sender.
            </param>
            <param name = "e" >
            The <see cref = "T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:BudgetExecution.Message.OnTargetButtonClicked(System.Object,System.EventArgs)">
            <summary>
            Called when [target button clicked].
            </summary>
            <param name = "sender" >
            The sender.
            </param>
            <param name = "e" >
            The <see cref = "T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:BudgetExecution.Message.OnClosing(System.Object,System.EventArgs)">
            <summary>
            Called when [closing].
            </summary>
            <param name = "sender" >
            The sender.
            </param>
            <param name = "e" >
            The <see cref = "T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:BudgetExecution.Message.OnLoad(System.Object,System.EventArgs)">
            <summary>
            Handles the Load event of the Message control.
            </summary>
            <param name = "sender" >
            The source of the event.
            </param>
            <param name = "e" >
            The <see cref = "T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="F:BudgetExecution.Message.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BudgetExecution.Message.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BudgetExecution.Message.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:BudgetExecution.AccessQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.AccessQuery"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.AccessQuery.#ctor(BudgetExecution.Source)">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.AccessQuery"/> class.
            </summary>
            <param name = "source" >
            The source.
            </param>
        </member>
        <member name="M:BudgetExecution.AccessQuery.#ctor(BudgetExecution.Source,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.AccessQuery"/> class.
            </summary>
            <param name = "source" >
            The source.
            </param>
            <param name = "dict" >
            The dictionary.
            </param>
        </member>
        <member name="M:BudgetExecution.AccessQuery.#ctor(BudgetExecution.IConnectionBuilder,BudgetExecution.ISqlStatement)">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.AccessQuery"/> class.
            </summary>
            <param name = "connectionBuilder" >
            The connectionBuilder.
            </param>
            <param name = "sqlStatement" >
            The sqlStatement.
            </param>
        </member>
        <member name="M:BudgetExecution.AccessQuery.Dispose(System.Boolean)">
            <summary>
            The Dispose
            </summary>
        </member>
        <member name="T:BudgetExecution.CsvQuery">
            <summary>
            </summary>
            <seealso cref = "T:BudgetExecution.Query"/>
        </member>
        <member name="P:BudgetExecution.CsvQuery.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>
            The provider.
            </value>
        </member>
        <member name="M:BudgetExecution.CsvQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.CsvQuery"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.CsvQuery.#ctor(System.String,BudgetExecution.SQL)">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.CsvQuery"/> class.
            </summary>
            <param name = "filePath" >
            The filePath.
            </param>
            <param name = "command" >
            The command.
            </param>
        </member>
        <member name="M:BudgetExecution.CsvQuery.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.CsvQuery"/> class.
            </summary>
            <param name = "filePath" >
            The filePath.
            </param>
            <param name = "dict" >
            The dictionary.
            </param>
        </member>
        <member name="M:BudgetExecution.CsvQuery.#ctor(System.String,BudgetExecution.SQL,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.CsvQuery"/> class.
            </summary>
            <param name = "filePath" >
            The filePath.
            </param>
            <param name = "command" >
            The command.
            </param>
            <param name = "dict" >
            The dictionary.
            </param>
        </member>
        <member name="M:BudgetExecution.CsvQuery.#ctor(BudgetExecution.IConnectionBuilder,BudgetExecution.ISqlStatement)">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.CsvQuery"/> class.
            </summary>
            <param name = "connectionBuilder" >
            The connectionBuilder.
            </param>
            <param name = "sqlStatement" >
            The sqlStatement.
            </param>
        </member>
        <member name="M:BudgetExecution.CsvQuery.SaveFile(OfficeOpenXml.ExcelPackage)">
            <summary>
            Saves the file.
            </summary>
            <param name = "workBook" >
            The workBook.
            </param>
        </member>
        <member name="M:BudgetExecution.CsvQuery.CsvImport(System.String@)">
            <summary>
            CSVs the import.
            </summary>
            <param name = "sheetName" >
            The sheetName.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.CsvQuery.CsvImport(System.String,System.String@)">
            <summary>
            CSVs the import.
            </summary>
            <param name = "fileName" >
            The fileName.
            </param>
            <param name = "sheetName" >
            The sheetName.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.CsvQuery.CsvExport(System.Data.DataTable,System.String)">
            <summary>
            CSVs the export.
            </summary>
            <param name = "table" >
            The table.
            </param>
            <param name = "filePath" >
            The filePath.
            </param>
        </member>
        <member name="M:BudgetExecution.CsvQuery.CsvExport(System.Windows.Forms.DataGridView)">
            <summary>
            CSVs the export.
            </summary>
            <param name = "dataGrid" >
            The dataGrid.
            </param>
        </member>
        <member name="M:BudgetExecution.CsvQuery.CreateCsvFile(System.String)">
            <summary>
            Creates the CSV file.
            </summary>
            <param name = "filePath" >
            The filePath.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.CsvQuery.GetCsvFile">
            <summary>
            Gets the CSV file.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.CsvQuery.SheetExists(System.String,System.Data.DataTable)">
            <summary>
            Sheets the exists.
            </summary>
            <param name = "sheetName" >
            The sheetName.
            </param>
            <param name = "dataTable" >
            The dataTable.
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:BudgetExecution.ExcelQuery">
            <summary>
            
            </summary>
            <seealso cref="T:BudgetExecution.Query" />
        </member>
        <member name="P:BudgetExecution.ExcelQuery.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>
            The provider.
            </value>
        </member>
        <member name="M:BudgetExecution.ExcelQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.ExcelQuery"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.ExcelQuery.#ctor(System.String,BudgetExecution.SQL)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.ExcelQuery"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:BudgetExecution.ExcelQuery.#ctor(System.String,BudgetExecution.SQL,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.ExcelQuery"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="command">The command.</param>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:BudgetExecution.ExcelQuery.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.ExcelQuery"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:BudgetExecution.ExcelQuery.#ctor(BudgetExecution.IConnectionBuilder,BudgetExecution.ISqlStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.ExcelQuery"/> class.
            </summary>
            <param name="connectionBuilder">The connectionBuilder.</param>
            <param name="sqlStatement">The sqlStatement.</param>
        </member>
        <member name="M:BudgetExecution.ExcelQuery.SaveFile(OfficeOpenXml.ExcelPackage)">
            <summary>
            Saves the file.
            </summary>
            <param name="workBook">The work book.</param>
        </member>
        <member name="M:BudgetExecution.ExcelQuery.WriteExcelFile(System.Data.DataTable,System.String)">
            <summary>
            Writes the excel file.
            </summary>
            <param name="table">The table.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:BudgetExecution.ExcelQuery.ReadExcelFile(System.String)">
            <summary>
            Reads the excel file.
            </summary>
            <param name="filePath">The file path.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ExcelQuery.GetExcelFile">
            <summary>
            Gets the excel file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ExcelQuery.ImportData(System.String@)">
            <summary>
            Imports the Data.
            </summary>
            <param name="sheetName">Name of the sheet.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ExcelQuery.CsvImport(System.String,System.String@)">
            <summary>
            CSVs the import.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="sheetName">Name of the sheet.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ExcelQuery.ExportToDataGrid(System.Windows.Forms.DataGridView)">
            <summary>
            Exports to Data grid.
            </summary>
            <param name="dataGrid">The Data grid.</param>
        </member>
        <member name="M:BudgetExecution.ExcelQuery.SheetExists(System.String,System.Data.DataTable)">
            <summary>
            Sheets the exists.
            </summary>
            <param name="sheetName">Name of the sheet.</param>
            <param name="dataTable">The Data table.</param>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.ExcelQuery.Release(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Worksheet,Microsoft.Office.Interop.Excel.Application)">
            <summary>
            Releases the specified range.
            </summary>
            <param name="range">The range.</param>
            <param name="workSheet">The work sheet.</param>
            <param name="excel">The excel.</param>
        </member>
        <member name="M:BudgetExecution.ExcelQuery.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>
            true
            </c>
            to release both managed and unmanaged resources;
            <c>
            false
            </c>
            to release only unmanaged resources.</param>
        </member>
        <member name="P:BudgetExecution.IQuery.IsDisposed">
            <summary>
            Gets or sets a value indicating whether this instance is disposed.
            </summary>
            <value>
              <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BudgetExecution.IQuery.GetArgs">
            <summary>
            Gets the arguments.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.IQuery.GetConnectionBuilder">
            <summary>
            Gets the connection manager.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.IQuery.GetSqlStatement">
            <summary>
            Gets the SQL statement.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.IQuery.GetConnection">
            <summary>
            Gets the connection.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.IQuery.GetCommand">
            <summary>
            Gets the command.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.IQuery.GetAdapter">
            <summary>
            Gets the adapter.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.IQuery.GetDataReader(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <summary>
            Sets the Data reader.
            </summary>
            <param name = "command" >
            The command.
            </param>
            <param name = "behavior" >
            The behavior.
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:BudgetExecution.Query">
            <summary>
            </summary>
            <seealso cref = "T:System.IDisposable"/>
        </member>
        <member name="M:BudgetExecution.Query.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.Query"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.Query.#ctor(BudgetExecution.Source,BudgetExecution.Provider,BudgetExecution.SQL)">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.Query"/> class.
            </summary>
            <param name = "source" >
            The source.
            </param>
            <param name = "provider" >
            The provider.
            </param>
            <param name = "commandType" >
            The commandType.
            </param>
        </member>
        <member name="M:BudgetExecution.Query.#ctor(BudgetExecution.Source,BudgetExecution.Provider,System.Collections.Generic.IDictionary{System.String,System.Object},BudgetExecution.SQL)">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.Query"/> class.
            </summary>
            <param name = "source" >
            The source Data.
            </param>
            <param name = "provider" >
            The provider used.
            </param>
            <param name = "dict" >
            The dictionary of parameters.
            </param>
            <param name = "commandType" >
            The type of sql command.
            </param>
        </member>
        <member name="M:BudgetExecution.Query.#ctor(BudgetExecution.IConnectionBuilder,BudgetExecution.ISqlStatement)">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.Query"/> class.
            </summary>
            <param name = "connectionBuilder" >
            The connectionBuilder.
            </param>
            <param name = "sqlStatement" >
            The sqlStatement.
            </param>
        </member>
        <member name="M:BudgetExecution.Query.#ctor(BudgetExecution.Source,BudgetExecution.Provider,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.Query"/> class.
            </summary>
            <param name = "source" >
            The source.
            </param>
            <param name = "provider" >
            The provider.
            </param>
            <param name = "dict" >
            The dictionary.
            </param>
        </member>
        <member name="M:BudgetExecution.Query.#ctor(System.String,BudgetExecution.SQL)">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.Query"/> class.
            </summary>
            <param name = "fullpath" >
            The fullpath.
            </param>
            <param name = "commandtype" >
            The commandType.
            </param>
        </member>
        <member name="M:BudgetExecution.Query.#ctor(System.String,BudgetExecution.SQL,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.Query"/> class.
            </summary>
            <param name = "fullpath" >
            The fullpath.
            </param>
            <param name = "commandtype" >
            The commandType.
            </param>
            <param name = "dict" >
            The dictionary.
            </param>
        </member>
        <member name="M:BudgetExecution.Query.GetDataReader(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <inheritdoc/>
            <summary>
            Sets the Data reader.
            </summary>
            <param name = "command" >
            The command.
            </param>
            <param name = "behavior" >
            The behavior.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.Query.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name = "disposing" >
            <c>
            true
            </c>
            to release both managed and unmanaged resources;
            <c>
            false
            </c>
            to release only unmanaged resources.
            </param>
        </member>
        <member name="M:BudgetExecution.Query.Dispose">
            <inheritdoc/>
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:BudgetExecution.QueryBase.Args">
            <summary>
            Gets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="P:BudgetExecution.QueryBase.ConnectionBuilder">
            <summary>
            Gets the connection manager.
            </summary>
            <value>
            The connection manager.
            </value>
        </member>
        <member name="P:BudgetExecution.QueryBase.SqlStatement">
            <summary>
            Gets the SQL statement.
            </summary>
            <value>
            The SQL statement.
            </value>
        </member>
        <member name="P:BudgetExecution.QueryBase.ConnectionFactory">
            <summary>
            Gets the connector.
            </summary>
            <value>
            The connector.
            </value>
        </member>
        <member name="P:BudgetExecution.QueryBase.CommandBuilder">
            <summary>
            Gets the commander.
            </summary>
            <value>
            The commander.
            </value>
        </member>
        <member name="P:BudgetExecution.QueryBase.Command">
            <summary>
            Gets the command.
            </summary>
            <value>
            The command.
            </value>
        </member>
        <member name="P:BudgetExecution.QueryBase.Adapter">
            <summary>
            Gets the adapter.
            </summary>
            <value>
            The adapter.
            </value>
        </member>
        <member name="P:BudgetExecution.QueryBase.IsDisposed">
            <summary>
            Gets or sets a value indicating whether this instance is disposed.
            </summary>
            <value>
            <c>
            true
            </c>
            if this instance is disposed; otherwise,
            <c>
            false
            </c>
            .
            </value>
        </member>
        <member name="P:BudgetExecution.QueryBase.DataReader">
            <summary>
            Gets or sets the Data reader.
            </summary>
            <value>
            The Data reader.
            </value>
        </member>
        <member name="M:BudgetExecution.QueryBase.GetSource">
            <summary>
            Gets the source.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.QueryBase.GetProvider">
            <summary>
            Gets the provider.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.QueryBase.SetArgs(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the arguments.
            </summary>
            <param name = "dict" >
            The dictionary.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.QueryBase.GetArgs">
            <inheritdoc/>
            <summary>
            Gets the arguments.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.QueryBase.SetConnectionBuilder(BudgetExecution.Source,BudgetExecution.Provider)">
            <summary>
            Sets the connection manager.
            </summary>
            <param name = "source" >
            The source.
            </param>
            <param name = "provider" >
            The provider.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.QueryBase.SetConnectionBuilder(System.String)">
            <summary>
            Sets the connection manager.
            </summary>
            <param name = "fullPath" >
            The fullPath.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.QueryBase.GetConnectionBuilder">
            <inheritdoc/>
            <summary>
            Gets the connection manager.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.QueryBase.GetCommandBuilder">
            <summary>
            Gets the command builder.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.QueryBase.GetSqlStatement">
            <inheritdoc/>
            <summary>
            Gets the SQL statement.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.QueryBase.GetConnection">
            <inheritdoc/>
            <summary>
            Gets the connection.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.QueryBase.GetCommand">
            <inheritdoc/>
            <summary>
            Gets the command.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.QueryBase.GetAdapter">
            <inheritdoc/>
            <summary>
            Gets the adapter.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.QueryBase.Fail(System.Exception)">
            <summary>
            Get Error Dialog.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:BudgetExecution.SqlCeQuery">
            <inheritdoc/>
            <summary>
            </summary>
            <seealso cref = "T:BudgetExecution.Query"/>
        </member>
        <member name="M:BudgetExecution.SqlCeQuery.#ctor">
            <inheritdoc/>
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.SqlCeQuery"/>
            class.
            </summary>
        </member>
        <member name="M:BudgetExecution.SqlCeQuery.#ctor(BudgetExecution.Source)">
            <inheritdoc/>
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.SqlCeQuery"/>
            class.
            </summary>
            <param name = "source" >
            The source.
            </param>
        </member>
        <member name="M:BudgetExecution.SqlCeQuery.#ctor(BudgetExecution.Source,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.SqlCeQuery"/>
            class.
            </summary>
            <param name = "source" >
            The source.
            </param>
            <param name = "dict" >
            The dictionary.
            </param>
        </member>
        <member name="M:BudgetExecution.SqlCeQuery.#ctor(BudgetExecution.IConnectionBuilder,BudgetExecution.ISqlStatement)">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.SqlCeQuery"/> class.
            </summary>
            <param name = "connectionBuilder" >
            The connectionBuilder.
            </param>
            <param name = "sqlStatement" >
            The sqlStatement.
            </param>
        </member>
        <member name="M:BudgetExecution.SqlCeQuery.GetExcelFilePath">
            <summary>
            Gets the excel file path.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.SqlCeQuery.CreateTableFromExcelFile(System.String,System.String@)">
            <summary>
            Creates the table from excel file.
            </summary>
            <param name = "fileName" >
            The filePath.
            </param>
            <param name = "sheetName" >
            The sheetName.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.SqlCeQuery.CreateTableFromCsvFile(System.String,System.String@)">
            <summary>
            Creates the table from CSV file.
            </summary>
            <param name = "filePath" >
            The filePath.
            </param>
            <param name = "sheetName" >
            The sheetName.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.SqlCeQuery.CheckIfSheetNameExists(System.String,System.Data.DataTable)">
            <summary>
            Checks if sheet name exists.
            </summary>
            <param name = "sheetName" >
            The sheetName.
            </param>
            <param name = "schemaTable" >
            The datatable.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.SqlCeQuery.Dispose(System.Boolean)">
            <summary>
            The Dispose
            </summary>
        </member>
        <member name="T:BudgetExecution.SQLiteQuery">
            <summary>
            </summary>
            <seealso cref = "T:BudgetExecution.Query"/>
        </member>
        <member name="F:BudgetExecution.SQLiteQuery._provider">
            <summary>
            Gets the provider.
            </summary>
            <value>
            The provider.
            </value>
        </member>
        <member name="M:BudgetExecution.SQLiteQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.SQLiteQuery"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.SQLiteQuery.#ctor(BudgetExecution.Source)">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.SQLiteQuery"/> class.
            </summary>
            <param name = "source" >
            The source.
            </param>
        </member>
        <member name="M:BudgetExecution.SQLiteQuery.#ctor(BudgetExecution.Source,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.SQLiteQuery"/> class.
            </summary>
            <param name = "source" >
            The source.
            </param>
            <param name = "dict" >
            The dictionary.
            </param>
        </member>
        <member name="M:BudgetExecution.SQLiteQuery.#ctor(BudgetExecution.IConnectionBuilder,BudgetExecution.ISqlStatement)">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.SQLiteQuery"/> class.
            </summary>
            <param name = "connectionBuilder" >
            The connectionBuilder.
            </param>
            <param name = "sqlStatement" >
            The sqlStatement.
            </param>
        </member>
        <member name="T:BudgetExecution.SQLiteQuery.ColDataType">
            <summary>
            </summary>
        </member>
        <member name="F:BudgetExecution.SQLiteQuery.ColDataType.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="M:BudgetExecution.SQLiteQuery.GetDataAdapter(System.Data.SQLite.SQLiteCommand)">
            <summary>
            Gets the Data adapter.
            </summary>
            <param name = "command" >
            The command.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.SQLiteQuery.GetDataReader(System.Data.SQLite.SQLiteCommand)">
            <summary>
            Gets the Data reader.
            </summary>
            <param name = "command" >
            The command.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.SQLiteQuery.GetCommandBuilder(System.Data.SQLite.SQLiteDataAdapter)">
            <summary>
            Gets the command builder.
            </summary>
            <param name = "adapter" >
            The adapter.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.SQLiteQuery.GetExcelFilePath">
            <summary>
            Gets the excel file path.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.SQLiteQuery.CreateTableFromExcelFile(System.String,System.String@)">
            <summary>
            Creates the table from excel file.
            </summary>
            <param name = "filePath" >
            The filePath.
            </param>
            <param name = "sheetName" >
            The sheetName.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.SQLiteQuery.CreateTableFromCsvFile(System.String,System.String@)">
            <summary>
            Creates the table from CSV file.
            </summary>
            <param name = "fileName" >
            The fileName.
            </param>
            <param name = "sheetName" >
            The sheetName.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.SQLiteQuery.GetParameters(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets the parameters.
            </summary>
            <param name = "dict" >
            The dictionary.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.SQLiteQuery.CheckIfSheetNameExists(System.String,System.Data.DataTable)">
            <summary>
            Checks if sheet name exists.
            </summary>
            <param name = "sheetName" >
            The sheetName.
            </param>
            <param name = "dataSchema" >
            The dataSchema.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.SQLiteQuery.CreateDatabase">
            <summary>
            Creates the database.
            </summary>
        </member>
        <member name="M:BudgetExecution.SQLiteQuery.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name = "disposing" >
            <c>
            true
            </c>
            to release both managed and unmanaged resources;
            <c>
            false
            </c>
            to release only unmanaged resources.
            </param>
        </member>
        <member name="T:BudgetExecution.SqlServerQuery">
            <summary>
            
            </summary>
            <seealso cref="T:BudgetExecution.Query" />
        </member>
        <member name="P:BudgetExecution.SqlServerQuery.Provider">
            <summary>
            Gets or sets the Provider
            </summary>
            <value>
            The provider.
            </value>
        </member>
        <member name="M:BudgetExecution.SqlServerQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.SqlServerQuery"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.SqlServerQuery.#ctor(BudgetExecution.Source)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.SqlServerQuery"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:BudgetExecution.SqlServerQuery.#ctor(BudgetExecution.Source,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.SqlServerQuery"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:BudgetExecution.SqlServerQuery.#ctor(BudgetExecution.IConnectionBuilder,BudgetExecution.ISqlStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.SqlServerQuery"/> class.
            </summary>
            <param name="connectionBuilder">The connectionBuilder.</param>
            <param name="sqlStatement">The sqlStatement.</param>
        </member>
        <member name="M:BudgetExecution.SqlServerQuery.Dispose(System.Boolean)">
            <summary>
            The Dispose
            </summary>
            <param name="disposing"><c>
            true
            </c>
            to release both managed and unmanaged resources;
            <c>
            false
            </c>
            to release only unmanaged resources.</param>
        </member>
        <member name="T:BudgetExecution.DataSchema">
            <summary>
            
            </summary>
            <seealso cref = "T:BudgetExecution.ISource"/>
            <seealso cref = "T:BudgetExecution.IDataSchema"/>
        </member>
        <member name="P:BudgetExecution.DataSchema.Name">
            <summary>
            Gets the name of the Table.
            </summary>
            <value>
            The name of the Table.
            </value>
        </member>
        <member name="P:BudgetExecution.DataSchema.Data">
            <summary>
            Gets the Data.
            </summary>
            <value>
            The Data.
            </value>
        </member>
        <member name="P:BudgetExecution.DataSchema.IsSource">
            <summary>
            Gets a value indicating whether this instance is source.
            </summary>
            <value>
            <c>
            true
            </c>
            if this instance is source; otherwise,
            <c>
            false
            </c>
            .
            </value>
        </member>
        <member name="M:BudgetExecution.DataSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.DataSchema"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.DataSchema.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.DataSchema"/> class.
            </summary>
            <param name = "table" >
            The Table.
            </param>
        </member>
        <member name="M:BudgetExecution.DataSchema.#ctor(System.Collections.Generic.IEnumerable{System.Data.DataRow})">
            <summary>
            Initializes a new instance of the <see cref = "T:BudgetExecution.DataSchema"/> class.
            </summary>
            <param name = "data" >
            The Data.
            </param>
        </member>
        <member name="M:BudgetExecution.DataSchema.GetColumnNames">
            <summary>
            Sets the column names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.DataSchema.GetColumnCaptions">
            <summary>
            Gets the column captions.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.DataSchema.GetColumnOrdinals">
            <summary>
            Gets the column ordinals.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.DataSchema.GetColumnTypes">
            <summary>
            Sets the column types.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.DataSchema.GetIndexes">
            <summary>
            Sets the primary keys.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.DataSchema.GetPrimaryKeyColumn">
            <summary>
            Gets the primary key columns.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.DataSchema.GetColumnSchema">
            <summary>
            Gets the column schema.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.DataSchema.GetSchemaTable">
            <summary>
            Gets the schema table.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.DataSchema.GetDataTable">
            <summary>
            Gets the Data Table.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.DataSchema.GetTableName">
            <summary>
            Gets the name of the Table.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.DataSchema.GetData">
            <summary>
            Gets the Data.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.DataSchema.GetSource">
            <summary>
            Gets the source.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.DataSchema.Fail(System.Exception)">
            <summary>
            Get Error Dialog.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:BudgetExecution.ISqlStatement">
            <summary> </summary>
        </member>
        <member name="M:BudgetExecution.ISqlStatement.GetCommandType">
            <summary>
            Gets the type of the command.
            </summary>
            <returns>
            SQL
            </returns>
        </member>
        <member name="M:BudgetExecution.ISqlStatement.GetSelectStatement">
            <summary>
            Gets the select statement.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:BudgetExecution.ISqlStatement.GetUpdateStatement">
            <summary> Gets the update statement. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.ISqlStatement.GetInsertStatement">
            <summary> Gets the insert statement. </summary>
            <returns> </returns>
        </member>
        <member name="M:BudgetExecution.ISqlStatement.GetDeleteStatement">
            <summary> Gets the delete statement. </summary>
            <returns> </returns>
        </member>
        <member name="T:BudgetExecution.SqlBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:BudgetExecution.SqlBase.ConnectionBuilder">
            <summary>
            The connection builder
            </summary>
        </member>
        <member name="P:BudgetExecution.SqlBase.CommandType">
            <summary>
            The command type
            </summary>
        </member>
        <member name="P:BudgetExecution.SqlBase.Args">
            <summary>
            The arguments
            </summary>
        </member>
        <member name="P:BudgetExecution.SqlBase.CommandText">
            <summary>
            The command text
            </summary>
        </member>
        <member name="M:BudgetExecution.SqlBase.SetConnectionBuilder(BudgetExecution.Source,BudgetExecution.Provider)">
            <summary>
            Sets the connection builder.
            </summary>
            <param name="source">The source.</param>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:BudgetExecution.SqlBase.SetArgs(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the arguments.
            </summary>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:BudgetExecution.SqlBase.SetCommandType(BudgetExecution.SQL)">
            <summary>
            Sets the type of the command.
            </summary>
            <param name="commandType">Type of the command.</param>
        </member>
        <member name="M:BudgetExecution.SqlBase.SetSelectStatement">
            <summary>
            Sets the select statement.
            </summary>
        </member>
        <member name="M:BudgetExecution.SqlBase.SetSelectStatement(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the select statement.
            </summary>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:BudgetExecution.SqlBase.SetUpdateStatement(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the update statement.
            </summary>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:BudgetExecution.SqlBase.SetInsertStatement(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the insert statement.
            </summary>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:BudgetExecution.SqlBase.SetDeleteStatement(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the delete statement.
            </summary>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:BudgetExecution.SqlBase.SetCommandText(System.String)">
            <summary>
            Sets the command text.
            </summary>
            <param name="sql">The SQL.</param>
        </member>
        <member name="M:BudgetExecution.SqlBase.SetCommandText(System.Collections.Generic.IDictionary{System.String,System.Object},BudgetExecution.SQL)">
            <summary>
            Sets the command text.
            </summary>
            <param name="dict">The dictionary.</param>
            <param name="commandType">Type of the command.</param>
        </member>
        <member name="M:BudgetExecution.SqlBase.Fail(System.Exception)">
            <summary>
            Fails the specified ex.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:BudgetExecution.SqlBase.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BudgetExecution.SqlConfig">
            <summary>
            
            </summary>
            <seealso cref="T:BudgetExecution.SqlBase" />
            <seealso cref="T:BudgetExecution.IProvider" />
            <seealso cref="T:BudgetExecution.ISource" />
        </member>
        <member name="F:BudgetExecution.SqlConfig.Extension">
            <summary>
            The extension
            </summary>
        </member>
        <member name="P:BudgetExecution.SqlConfig.ProviderPath">
            <summary>
            The provider path
            </summary>
        </member>
        <member name="P:BudgetExecution.SqlConfig.Source">
            <summary>
            The source
            </summary>
        </member>
        <member name="P:BudgetExecution.SqlConfig.Provider">
            <summary>
            The provider
            </summary>
        </member>
        <member name="P:BudgetExecution.SqlConfig.SqlStatement">
            <summary>
            The SQL statement
            </summary>
        </member>
        <member name="P:BudgetExecution.SqlConfig.FilePath">
            <summary>
            The file path
            </summary>
        </member>
        <member name="P:BudgetExecution.SqlConfig.FileName">
            <summary>
            The file name
            </summary>
        </member>
        <member name="M:BudgetExecution.SqlConfig.GetArgs">
            <summary>
            Gets the arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlConfig.GetConnectionBuilder">
            <summary>
            Gets the connection builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlConfig.GetScriptFiles">
            <summary>
            Gets the script files.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BudgetExecution.SqlFactory">
            <summary> </summary>
            <seealso cref = "T:BudgetExecution.SqlStatement"/>
        </member>
        <member name="M:BudgetExecution.SqlFactory.#ctor(BudgetExecution.IConnectionBuilder,BudgetExecution.SQL)">
            <summary>
            Initializes a new instance of the
            <see cref = "T:BudgetExecution.SqlFactory"/>
            class.
            </summary>
            <param name = "conectionBuilder" > </param>
            <param name = "command" > The command. </param>
        </member>
        <member name="M:BudgetExecution.SqlFactory.#ctor(System.String,BudgetExecution.SQL)">
            <summary>
            Initializes a new instance of the
            <see cref = "T:BudgetExecution.SqlFactory"/>
            class.
            </summary>
            <param name = "filePath" > The filePath. </param>
            <param name = "command" > The command. </param>
        </member>
        <member name="T:BudgetExecution.SqlStatement">
            <summary>
            
            </summary>
            <seealso cref="T:BudgetExecution.SqlConfig" />
            <seealso cref="T:BudgetExecution.ISqlStatement" />
        </member>
        <member name="M:BudgetExecution.SqlStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.SqlStatement"/> class.
            </summary>
        </member>
        <member name="M:BudgetExecution.SqlStatement.#ctor(BudgetExecution.IConnectionBuilder,BudgetExecution.SQL)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.SqlStatement"/> class.
            </summary>
            <param name="connectionBuilder">The connectionBuilder.</param>
            <param name="commandType">The commandType.</param>
        </member>
        <member name="M:BudgetExecution.SqlStatement.#ctor(BudgetExecution.IConnectionBuilder,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.SqlStatement"/> class.
            </summary>
            <param name="connectionBuilder">The connectionBuilder.</param>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:BudgetExecution.SqlStatement.#ctor(BudgetExecution.IConnectionBuilder,System.Collections.Generic.IDictionary{System.String,System.Object},BudgetExecution.SQL)">
            <summary>
            Initializes a new instance of the <see cref="T:BudgetExecution.SqlStatement"/> class.
            </summary>
            <param name="connectionBuilder">The connectionBuilder.</param>
            <param name="dict">The dictionary.</param>
            <param name="commandType">Type of the commandType.</param>
        </member>
        <member name="M:BudgetExecution.SqlStatement.GetCommandType">
            <summary>
            Gets the type of the command.
            </summary>
            <returns>
            SQL
            </returns>
        </member>
        <member name="M:BudgetExecution.SqlStatement.GetSelectStatement">
            <summary>
            Gets the select statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlStatement.GetUpdateStatement">
            <summary>
            Gets the update statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlStatement.GetInsertStatement">
            <summary>
            Gets the insert statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BudgetExecution.SqlStatement.GetDeleteStatement">
            <summary>
            Gets the delete statement.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BudgetExecution.DataWorker.BindingSource">
            <summary>
            Gets or sets the binding source.
            </summary>
            <value>
            The binding source.
            </value>
        </member>
    </members>
</doc>
